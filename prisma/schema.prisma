generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Remove directUrl for now - Railway handles connection pooling automatically
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
  readings  Reading[]

  @@map("users")
}

model Comic {
  id          String     @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  author      String?
  status      Status     @default(ONGOING)
  genres      String[]
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  chapters    Chapter[]
  favorites   Favorite[]
  readings    Reading[]

  @@map("comics")
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  chapterNum  Float
  pages       String[]
  publishedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comicId     String
  comic       Comic     @relation(fields: [comicId], references: [id], onDelete: Cascade)
  readings    Reading[]

  @@unique([comicId, chapterNum])
  @@map("chapters")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  comicId   String
  comic     Comic    @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, comicId])
  @@map("favorites")
}

model Reading {
  id          String   @id @default(cuid())
  currentPage Int      @default(0)
  isCompleted Boolean  @default(false)
  lastReadAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  comicId     String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  comic       Comic    @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, comicId, chapterId])
  @@map("readings")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ONGOING
  COMPLETED
  HIATUS
  DROPPED
}
